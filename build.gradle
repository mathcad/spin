plugins {
    id "org.sonarqube" version "3.0"
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "http://192.168.12.150:9000/"
        property "sonar.login", "8ee1a48e6733cddb38d2ac24db06978cd49aea35"
        property "sonar.profile", "Sonar way"
    }
}

allprojects {
    group "org.mathcat"

    repositories {
        mavenLocal()
        maven {
            url = "http://192.168.40.151:8081/repository/mathcat/"
            allowInsecureProtocol = true
        }
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "idea"

    ext {
        javaVersion = 1.8
        encoding = "UTF-8"
        repoSnapUrl = "http://192.168.40.151:8081/repository/maven-snapshots/"
        repoReleaseUrl = "http://192.168.40.151:8081/repository/maven-releases/"
        repoUser = "dev"
        repoPasswd = "8D22185"

        // core
        junitLauncherVersion =  "1.7.0"
        junitJupiterVersion = "5.7.0"
        slf4jVersion = "1.7.30"
        asmVersion = "9.0"
        httpclientVersion = "4.5.13"
        httpasyncclientVersion = "4.1.4"
        commonsNetVersion = "3.7.2"
        dom4jVersion = "1.6"
        poiVersion = "4.1.2"
        bouncyVersion = "1.66"
        zxingVersion = "3.4.1"

        //data core
        springVersion = "5.3.2"
        springDataRedisVersion = "2.4.2"
        zookeeperVersion = "3.6.2"
        sqliteVersion = "3.34.0"
        freemarkerVersion = "2.3.30"
        beetlVersion = "3.3.1.RELEASE"

        // data
        hibernateVersion = "5.4.26.Final"
        transactionApiVersion = "1.3"

        // data spring boot starter
        springBootVersion = "2.4.1"
        atomikosVersion = "5.0.8"

        // kotlin
        kotlinVersion = "1.4.21"

        // mybatis spring boot starter
        mybatisPlusVersion = "3.4.1"

        // web
        itextpdfVersion = "5.5.13.2"
        swaggerVersion = "3.0.0"
        servletVersion = "4.0.1"
        validationVersion = "2.0.1.Final"

        // cloud starter
        springCloudVersion = "3.0.0"
        springKafkaVersion = "2.6.4"
        sentinelStarterVersion = "2.2.3.RELEASE"
        apolloVersion = "1.6.1.1"
        knife4jVersion = "3.0.2"
        p6spyVersion = "3.9.1"
        feignHttpVersion = "11.0"
        seataVersion = "1.4.1"
        prometheusVersion = "1.6.2"
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }

    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }

    javadoc {
        options.encoding = encoding
    }

    task createDirs(group: "help") doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    task sourceJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
    }

    idea {
        module {
            inheritOutputDirs = true
            downloadSources = true
            downloadJavadoc = true
//            outputDir = file("$buildDir/classes/main/")
//            testOutputDir = file("$buildDir/classes/test/")
        }
    }
}

task cleanBuild(group: "build") doLast {
    File f = file("build")
    if (f.exists()) {
        print("delete build")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file("out")
    if (f.exists()) {
        print("delete out")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file("target")
    if (f.exists()) {
        print("delete target")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file("bin")
    if (f.exists()) {
        print("delete bin")
        println(f.deleteDir() ? " success" : " failure")
    }
    allprojects.each { p ->
        f = file(p.name + "/build")
        if (f.exists()) {
            print("delete " + p.name + "/build")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/out")
        if (f.exists()) {
            print("delete " + p.name + "/out")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/target")
        if (f.exists()) {
            print("delete " + p.name + "/target")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/bin")
        if (f.exists()) {
            print("delete " + p.name + "/bin")
            println(f.deleteDir() ? " success" : " failure")
        }
    }
}

task cleanEclipse(group: "build") doLast {
    File f = file(".settings")
    if (f.exists()) {
        print("delete .settings")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file(".classpath")
    if (f.exists()) {
        print("delete .classpath")
        println(f.delete() ? " success" : " failure")
    }
    f = file(".project")
    if (f.exists()) {
        print("delete .project")
        println(f.delete() ? " success" : " failure")
    }
    allprojects.each { p ->
        f = file(p.name + "/.settings")
        if (f.exists()) {
            print("delete " + p.name + "/.settings")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/.classpath")
        if (f.exists()) {
            print("delete " + p.name + "/.classpath")
            println(f.delete() ? " success" : " failure")
        }
        f = file(p.name + "/.project")
        if (f.exists()) {
            print("delete " + p.name + "/.project")
            println(f.delete() ? " success" : " failure")
        }
    }
}
