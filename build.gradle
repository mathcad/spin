plugins {
    id "org.sonarqube" version "2.8"
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "http://192.168.12.151:9000/"
        property "sonar.login", "7d1627a0615b8406bcf02a459c42df204bdc04eb"
    }
}

allprojects {
    group 'org.mathcat'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'

    ext {
        javaVersion = 1.8
        encoding = 'UTF-8'
        repoSnapUrl = 'http://60.169.170.69:8081/repository/maven-snapshots/'
        repoUser = 'dev'
        repoPasswd = '8D22185'

        // core
        junitJupiterVersion = '5.5.2'
        slf4jVersion = '1.7.26'
        asmVersion = '7.1'
        httpclientVersion = '4.5.10'
        httpasyncclientVersion = '4.1.4'
        commonsNetVersion = '3.6'
        dom4jVersion = '1.6'
        poiVersion = '4.1.0'
        bouncyVersion = '1.62'

        //data core
        springVersion = '5.1.10.RELEASE'
        springDataRedisVersion = '2.2.0.RELEASE'
        zkclientVersion = '0.11'
        sqliteVersion = '3.28.0'
        freemarkerVersion = '2.3.29'
        beetlVersion = '3.0.13.RELEASE'

        // data
        hibernateVersion = '5.4.5.Final'
        transactionApiVersion = '1.3'

        // data starter
        springBootVersion = '2.1.9.RELEASE'
        atomikosVersion = '5.0.1'

        // kotlin
        kotlinVersion = '1.3.50'

        // web
        itextpdfVersion = '5.5.13.1'
        servletVersion = '4.0.1'

        springCloudVersion = '2.1.3.RELEASE'
        jasyptVersion = '2.1.1'
        commonsPoolVersion = '2.7.0'
        spinVersion = '2.2.5-SNAPSHOT'
        springKafkaVersion = '2.2.9.RELEASE'
        sentinelStarterVersion = '0.9.0.RELEASE'
        sentinelVersion = '1.6.3'
        yamlVersion = '1.25'
        apolloVersion = '1.4.1'
        knife4jVersion = '1.9.6'
        p6spyVersion = '3.8.6'
        mybatisPlusVersion = '3.2.0'
        feignHttpVersion = '10.5.1'
        validationVersion = '2.0.1.Final'
        prometheusVersion = '1.3.0'
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }

    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }

    javadoc {
        options.encoding = encoding
    }

    repositories {
        mavenLocal()
        maven { url = "http://60.169.170.69:8081/repository/mathcat/" }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }

    task createDirs(group: 'help') doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    task sourceJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
//    archives sourceJar
    }

    idea {
        module {
            inheritOutputDirs = true
            downloadSources = true
            downloadJavadoc = true
//            outputDir = file("$buildDir/classes/main/")
//            testOutputDir = file("$buildDir/classes/test/")
        }
    }
}

task cleanBuild(group: 'build') doLast {
    File f = file('build')
    if (f.exists()) {
        print("delete build")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file('out')
    if (f.exists()) {
        print("delete out")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file('target')
    if (f.exists()) {
        print("delete target")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file("bin")
    if (f.exists()) {
        print("delete bin")
        println(f.deleteDir() ? " success" : " failure")
    }
    allprojects.each { p ->
        f = file(p.name + "/build")
        if (f.exists()) {
            print("delete " + p.name + "/build")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/out")
        if (f.exists()) {
            print("delete " + p.name + "/out")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/target")
        if (f.exists()) {
            print("delete " + p.name + "/target")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/bin")
        if (f.exists()) {
            print("delete " + p.name + "/bin")
            println(f.deleteDir() ? " success" : " failure")
        }
    }
}

task cleanEclipse(group: 'build') doLast {
    File f = file('.settings')
    if (f.exists()) {
        print("delete .settings")
        println(f.deleteDir() ? " success" : " failure")
    }
    f = file('.classpath')
    if (f.exists()) {
        print("delete .classpath")
        println(f.delete() ? " success" : " failure")
    }
    f = file('.project')
    if (f.exists()) {
        print("delete .project")
        println(f.delete() ? " success" : " failure")
    }
    allprojects.each { p ->
        f = file(p.name + "/.settings")
        if (f.exists()) {
            print("delete " + p.name + "/.settings")
            println(f.deleteDir() ? " success" : " failure")
        }
        f = file(p.name + "/.classpath")
        if (f.exists()) {
            print("delete " + p.name + "/.classpath")
            println(f.delete() ? " success" : " failure")
        }
        f = file(p.name + "/.project")
        if (f.exists()) {
            print("delete " + p.name + "/.project")
            println(f.delete() ? " success" : " failure")
        }
    }
}
